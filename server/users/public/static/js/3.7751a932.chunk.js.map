{"version":3,"sources":["util/helper-functions/index.js","util/operations/tasks.js","dashboard-components/modals/AddTask/helper/index.js","dashboard-components/modals/AddTask/index.js"],"names":["notifyUser","response","status","toast","success","message","error","createATask","taskData","apiRequest","editATask","handleTasks","formData","editTask","a","setLoading","setShowModal","newTaskData","show","AddTask","data","useForm","register","handleSubmit","errors","useState","loading","className","onSubmit","FormGroup","title","htmlFor","ref","required","type","name","defaultValue","description","rows","Button","variant","block","size","disabled","Spinner","animation","role","aria-hidden"],"mappings":"8MAMaA,EAAa,SAACC,GACzBA,EAASC,OACLC,IAAMC,QAAQH,EAASI,SACvBF,IAAMG,MAAML,EAASI,U,QCPrBE,EAAc,SAACC,GACnB,OAAOC,YAAW,eAAgB,OAAQD,IAGtCE,EAAY,SAACF,GACjB,OAAOC,YAAW,QAAS,QAASD,ICJzBG,EAAW,uCAAG,WACzBC,EACAC,GAFyB,mCAAAC,EAAA,yDAGzBN,EAHyB,+BAGd,GACXO,EAJyB,uBAKzBC,EALyB,uBAOzBD,GAAW,GACLE,EARmB,2BASpBT,GACAI,IAEYC,EAZQ,iCAafH,EAAUO,GAbK,4DAcfV,EAAYU,GAdG,gCAYnBhB,EAZmB,OAebc,GAAW,GACvBd,GAAYD,EAAWC,IACnBA,EAASC,OAjBY,0CAkBhBc,EAAa,CAClBE,MAAM,KAnBe,4CAAH,wDC6ETC,UA3EC,SAAC,GAA4B,IAA1BH,EAAyB,EAAzBA,aAAcI,EAAW,EAAXA,KAAW,EACCC,cAAnCC,EADkC,EAClCA,SAAUC,EADwB,EACxBA,aAAcC,EADU,EACVA,OADU,EAEZC,oBAAS,GAFG,mBAEnCC,EAFmC,KAE1BX,EAF0B,OAGEK,EAApCP,gBAHkC,WAGEO,EAAlBZ,gBAHgB,MAGL,GAHK,EAS1C,OACE,oCACE,wBAAImB,UAAU,oBACX,IACAd,EAAW,YAAc,aAG5B,0BAAMe,SAAUL,GAXL,SAACX,GACd,OAAOD,EAAYC,EAAUC,EAAUL,EAAUO,EAAYC,OAWzD,kBAACa,EAAA,EAAD,KACE,2BACEF,UAAWH,EAAOM,MAAQ,cAAgB,QAC1CC,QAAQ,UAFV,SAMA,2BACEC,IAAKV,EAAS,CAAEW,UAAU,IAC1BN,UAAU,eACVO,KAAK,OACLC,KAAK,QACLC,aAAY,OAAE5B,QAAF,IAAEA,OAAF,EAAEA,EAAUsB,SAG5B,kBAACD,EAAA,EAAD,KACE,2BACEF,UAAWH,EAAOa,YAAc,cAAgB,QAChDN,QAAQ,eAEPP,EAAOnB,QAAP,0BAA6C,eAEhD,8BACE2B,IAAKV,EAAS,CAAEW,UAAU,IAC1BK,KAAK,KACLX,UAAU,eACVQ,KAAK,cACLC,aAAY,OAAE5B,QAAF,IAAEA,OAAF,EAAEA,EAAU6B,eAI5B,kBAACE,EAAA,EAAD,CACEC,QAAQ,UACRC,OAAO,EACPC,KAAM,KACNR,KAAK,SACLS,SAAUjB,EACVC,UAAU,SAERD,GAAW,0CAEZA,GACC,kBAACkB,EAAA,EAAD,CACEC,UAAU,SACVH,KAAK,KACLI,KAAK,SACLC,eAAa,EACbpB,UAAU,kBAEV,0BAAMA,UAAU,WAAhB","file":"static/js/3.7751a932.chunk.js","sourcesContent":["import { toast } from \"react-toastify\";\n\n/**\n * Function to toast API response messages\n * @param {response object} response\n */\nexport const notifyUser = (response) => {\n  response.status\n    ? toast.success(response.message)\n    : toast.error(response.message);\n};\n","import { apiRequest } from \"../apiRequest\";\n\nconst createATask = (taskData) => {\n  return apiRequest(\"/task/create\", \"POST\", taskData);\n};\n\nconst editATask = (taskData) => {\n  return apiRequest(\"/task\", \"PATCH\", taskData);\n};\n\nexport { createATask, editATask };\n","import { notifyUser } from \"../../../../util/helper-functions\";\nimport { createATask, editATask } from \"../../../../util/operations/tasks\";\n\nexport const handleTasks = async (\n  formData,\n  editTask,\n  taskData = {},\n  setLoading,\n  setShowModal\n) => {\n  setLoading(true);\n  const newTaskData = {\n    ...taskData,\n    ...formData,\n  };\n  const response = editTask\n    ? await editATask(newTaskData)\n    : await createATask(newTaskData);\n  response && setLoading(false);\n  response && notifyUser(response);\n  if (response.status) {\n    return setShowModal({\n      show: false,\n    });\n  }\n};\n","import React, { useState } from \"react\";\nimport { FormGroup, Button, Spinner } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { handleTasks } from \"./helper\";\n\nconst AddTask = ({ setShowModal, data }) => {\n  const { register, handleSubmit, errors } = useForm();\n  const [loading, setLoading] = useState(false);\n  const { editTask = false, taskData = {} } = data;\n\n  const submit = (formData) => {\n    return handleTasks(formData, editTask, taskData, setLoading, setShowModal);\n  };\n\n  return (\n    <>\n      <h5 className=\"text-center mb-3\">\n        {\" \"}\n        {editTask ? \"Edit Task\" : \"Add Task \"}\n      </h5>\n\n      <form onSubmit={handleSubmit(submit)}>\n        <FormGroup>\n          <label\n            className={errors.title ? \"error-label\" : \"label\"}\n            htmlFor=\"Title \"\n          >\n            Title\n          </label>\n          <input\n            ref={register({ required: true })}\n            className=\"form-control\"\n            type=\"text\"\n            name=\"title\"\n            defaultValue={taskData?.title}\n          />\n        </FormGroup>\n        <FormGroup>\n          <label\n            className={errors.description ? \"error-label\" : \"label\"}\n            htmlFor=\"Description\"\n          >\n            {errors.message ? `Description is required` : \"Description\"}\n          </label>\n          <textarea\n            ref={register({ required: true })}\n            rows=\"10\"\n            className=\"form-control\"\n            name=\"description\"\n            defaultValue={taskData?.description}\n          />\n        </FormGroup>\n\n        <Button\n          variant=\"primary\"\n          block={true}\n          size={\"md\"}\n          type=\"submit\"\n          disabled={loading}\n          className=\"mt-4\"\n        >\n          {!loading && <span>Add task</span>}\n\n          {loading && (\n            <Spinner\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden={true}\n              className=\"align-baseline\"\n            >\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          )}\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default AddTask;\n"],"sourceRoot":""}